/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   burgerClose: () => (/* binding */ burgerClose),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const burger = () => {
    const menuIcon = document.querySelector('.header__menu-icon');
    const menuBody = document.querySelector('.menu__body');
    const body = document.querySelector('body');
    const logo = document.querySelector('.header__logo');

    if (menuIcon) {
        menuIcon.addEventListener("click", function () {
            body.classList.toggle('_lock');
            menuIcon.classList.toggle('_active');
            menuBody.classList.toggle('_active');
            logo.classList.toggle('_active');
        })
    }
}

const burgerClose = () => {
    const menuIcon = document.querySelector('.header__menu-icon');
    const menuBody = document.querySelector('.menu__body');
    const body = document.querySelector('body');
    const logo = document.querySelector('.header__logo');

    if (menuIcon.classList.contains('_active')) {
        body.classList.remove('_lock');
        menuIcon.classList.remove('_active');
        menuBody.classList.remove('_active');
        logo.classList.remove('_active');
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (burger);

/***/ }),
/* 2 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const appHeight = () => {
    const doc = document.documentElement;
    doc.style.setProperty('--app-height', `${window.innerHeight}px`);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (appHeight);

/***/ }),
/* 3 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const lazy = () => {
    const lazyBlocks = document.querySelectorAll('.lazy');

    const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const target = entry.target;
                showImages(target);
                observer.unobserve(target);
            }
        });
    }, {
        threshold: 0
    });

    lazyBlocks.forEach(lazyBlock => {
        imageObserver.observe(lazyBlock);
    });

    const showImages = (target) => {
        const images = target.querySelectorAll('img[data-src], source[data-srcset]');

        if (images.length) {
            images.forEach((image) => {
                if (image.dataset.src) {
                    image.setAttribute('src', image.dataset.src);
                    image.removeAttribute('data-src');
                }
                if (image.dataset.srcset) {
                    image.setAttribute('srcset', image.dataset.srcset);
                    image.removeAttribute('data-srcset');
                }
            });
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (lazy);

/***/ }),
/* 4 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function moveElement() {
    const elementsToMove = document.querySelectorAll('[data-move]');

    if (elementsToMove.length > 0) {
        for (let index = 0; index < elementsToMove.length; index++) {
            const element = elementsToMove[index];
            const elementName = element.dataset.move.split(', ')[0];
            const screenWidth = element.dataset.move.split(', ')[1];
            const firstPosition = document.querySelector(`[data-desk*=${elementName}]`);
            const lastPosition = document.querySelector(`[data-mob*=${elementName}]`);

            function move() {
                let position;
                if (window.innerWidth <= screenWidth) {
                    if (lastPosition.dataset.mob.split(', ')[1]) {
                        position = lastPosition.dataset.mob.split(', ')[1];
                    } else {
                        position = 'append';
                    }
                    moveObj(element, lastPosition, position);
                } else {
                    if (firstPosition.dataset.desk.split(', ')[1]) {
                        position = firstPosition.dataset.desk.split(', ')[1];
                    } else {
                        position = 'append';
                    }
                    moveObj(element, firstPosition, position);
                }
            }

            function moveObj($elem, $target, $position = 'append') {
                if ($position == 'after') {
                    $target.after($elem);
                } else if ($position == 'before') {
                    $target.before($elem);
                } else if ($position == 'append') {
                    $target.append($elem);
                } else if ($position == 'prepend') {
                    $target.prepend($elem);
                }
            }

            move();

            window.addEventListener('resize', function () {
                move();
            });
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (moveElement);

/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_functions_burger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _modules_functions_appHeight_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _modules_functions_lazy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _modules_functions_moveElement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);




// import select, { selectClose } from './modules/form/select.js';
// import tabs from './modules/page/tabs.js';
// import modal, { modalClose } from './modules/page/modal.js';
// import checkbox from './modules/form/checkbox.js';
// import radio from './modules/form/radio.js';

(0,_modules_functions_burger_js__WEBPACK_IMPORTED_MODULE_0__["default"])();
(0,_modules_functions_appHeight_js__WEBPACK_IMPORTED_MODULE_1__["default"])();
(0,_modules_functions_lazy_js__WEBPACK_IMPORTED_MODULE_2__["default"])();
// isWebp();
// radio();
// checkbox();
// select();
// modal();
(0,_modules_functions_moveElement_js__WEBPACK_IMPORTED_MODULE_3__["default"])();

const serviceImageChange = (item) => {
    const id = item.replace('item', '');

    const image = document.querySelector(`#image${id}`);
    const images = document.querySelectorAll('.services__image');

    const currentImage = document.querySelector('.services__image.current');
    let currentImageId = currentImage.getAttribute('id').replace('image', '');

    if (id < currentImageId) {
        for (let index = id; index < images.length; index++) {
            const image = images[index];
            image.classList.remove('active');
        }
    } else {
        for (let index = 0; index < id - 1; index++) {
            const image = images[index];
            image.classList.add('active');
        }
    }

    images.forEach((image) => {
        image.classList.remove('current');
    });

    image.classList.add('current');
    image.classList.add('active');
}

const serviceDescChange = (item) => {
    const id = item.replace('item', '');

    const desc = document.querySelector(`#desc${id}`);

    const descItems = document.querySelectorAll('.services__desc');

    descItems.forEach((item) => {
        item.classList.remove('active');
    });

    desc.classList.add('active');
}

const serviceLinkChange = (link, e) => {

    const links = document.querySelectorAll('.services__link');

    if (links.length) {
        links.forEach((link) => {
            link.classList.remove('active');
        });
    }

    link.classList.add('active');

    const item = link.getAttribute('href');

    serviceImageChange(item);
    serviceDescChange(item);

    e.preventDefault();
}

const prevSlide = () => {
    const links = document.querySelectorAll('.services__link');

    const currentLink = document.querySelector('.services__link.active');

    const id = currentLink.getAttribute('href').replace('item', '');

    if (links[id - 2]) {
        links[id - 2].click();

        links[id - 2].scrollIntoView({
            behavior: 'smooth',
            block: 'nearest',
            inline: 'center'
        })
    }
}

const nextSlide = () => {
    const links = document.querySelectorAll('.services__link');

    const currentLink = document.querySelector('.services__link.active');

    const id = currentLink.getAttribute('href').replace('item', '');

    if (links[id]) {
        links[id].click();

        links[id].scrollIntoView({
            behavior: 'smooth',
            block: 'nearest',
            inline: 'center'
        })
    }
}

const scrollToActiveSlide = () => {
    const activeLink = document.querySelector('.services__link.active');

    const body = activeLink.parentElement;

    if (window.innerWidth <= 768) {
        activeLink.scrollIntoView({
            behavior: 'smooth',
            block: 'nearest',
            inline: 'center'
        })
    }
}

const videoAutoPlay = () => {

    const video = document.querySelector('video');

    const videoObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                video.play();
            } else {
                video.pause();
            }
        });
    }, {
        threshold: .5
    });

    videoObserver.observe(video);
}
videoAutoPlay();

const videoMuted = (btn) => {

    const video = btn.previousElementSibling

    btn.classList.toggle('active');

    btn.classList.contains('active') ? video.muted = false : video.muted = true;

}

window.addEventListener('resize', () => {
    ;(0,_modules_functions_appHeight_js__WEBPACK_IMPORTED_MODULE_1__["default"])();
    scrollToActiveSlide();
});

document.addEventListener('click', (e) => {

    const serviceLink = e.target.closest('.services__link');
    if (serviceLink) {
        serviceLinkChange(serviceLink, e);
    }

    const prevBtn = e.target.closest('.navigation__prev');
    if (prevBtn) {
        prevSlide();
    }

    const nextBtn = e.target.closest('.navigation__next');
    if (nextBtn) {
        nextSlide();
    }

    const volumeBtn = e.target.closest('.video__volume');
    if (volumeBtn) {
        videoMuted(volumeBtn);
    }
});

document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        (0,_modules_functions_burger_js__WEBPACK_IMPORTED_MODULE_0__.burgerClose)();
    }
});
/******/ })()
;